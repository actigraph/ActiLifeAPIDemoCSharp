using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using Newtonsoft.Json;

namespace ActiLifeAPILibrary.Models.Actions
{
	/// <summary>
	/// Options for USBDownload Action
	/// </summary>
	public class USBDownload : ActionBase
	{
		/// <summary>
		/// The device serial number to target.
		/// </summary>
		[JsonProperty(Required = Required.Always, DefaultValueHandling = DefaultValueHandling.Populate)]
		public string Serial { get; set; }

		/// <summary>
		/// <para>The location of the output file to be generated by ActiLife.</para>
		/// <para>Notes: Max length of 255 characters.</para>
		/// </summary>
		[JsonProperty(Required = Required.Always, DefaultValueHandling = DefaultValueHandling.Populate)]
		public string FileOutputPath { get; set; }

		/// <summary>
		/// Whether to use metric units (meters) instead of EN-US units (feet, inches).
		/// </summary>
		[JsonProperty(Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)]
		public bool FileUseMetricUnits { get; set; }

		/// <summary>
		/// <para>A JSON Array of formats for output requested. Can be any combination of the following values.</para>
		/// <para>Accepted values:</para>
		/// <para>"gt3x", 
		/// "agd" (default; must provide AGDOptions), 
		/// "rawcsv" (can provide CSVOptions) [API 1.9]</para>
		/// <para>Notes:
		/// GT3X files are only supported by + devices (i.e. GT3X+, wGT3X+, ActiSleep+, etc),
		/// GT3X files are created for file formats of "agd"</para>
		/// </summary>
		[JsonProperty(Required = Required.Default, DefaultValueHandling = DefaultValueHandling.Populate)]
		[DefaultValue(new string[] { "agd" })]
		public string[] FileFormats { get; set; }

		/// <summary>
		/// <para>Options for creating an AGD if AGD is desired output.</para>
		/// <para>Notes: Required if output type includes AGD.</para>
		/// </summary>
		[JsonProperty(Required = Required.Default)]
		public AGDOptions AGDOptions { get; set; }

		/// <summary>
		/// Whether to include biometric and user information in the downloaded file.
		/// </summary>
		[JsonProperty(Required = Required.AllowNull)]
		public bool IncludeBioData { get; set; }

		/// <summary>
		/// <para>Bio information is a nested JSON object. The values will be injected into the file as metadata (if IncludeBiodData is true).</para>
		/// <para>Notes:</para>
		/// <para>- Height is measured in cm.</para>
		/// <para>- Weight is measured in kg.</para>
		/// <para>- Only required if IncludeBioData is true!</para>
		/// </summary>
		[JsonProperty(Required = Required.AllowNull)]
		public BioData BioData { get; set; }

		/// <summary>
		/// Options for creating a CSV file if CSV is desired output.
		/// </summary>
		[JsonProperty(Required = Required.AllowNull)]
		public CSVOptions CSVOptions { get; set; }
	}
}
